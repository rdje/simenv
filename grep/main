#!bash
# ==========================================================================================
# Copyright (C) 2022 Richard DJE
#
# This file is part of simenv
#
# simenv is free software: you can redistribute it and/or modify it under the terms
# of the GNU General Public License as published by the Free Software Foundation, either 
# version 3 of the License, or any later version.
# 
# This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
# without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# See the GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License along with this program. 
# If not, see <https://www.gnu.org/licenses/>.
# ==========================================================================================


# Function: main
#
function main
{
  if (($# == 0)); then
    callsub $(get_subdir)/help
    return
  fi

  if [[ -d $(get_subdir)/$1 ]]; then
    local _sub=$1
    shift
    
    callsub $(get_subdir)/$_sub "$@"
    return
  fi

           
  for v in "$@"
  do
   if [[ $debug ]]; then echo "initial: <$v>"; fi
  done

  if [[ $debug ]]; then echo; fi

  local opts=$(getopt -n simenv -a -o ihnRIsx:d: -l xf:,xd:,ad,add-directory:,dry-run -- "$@")
  if (($? && $? < 4)); then
    callsub $(get_subdir)/help
    return
  fi


  eval set -- $opts

  for a
  do
    if [[ $debug ]]; then echo "getopt: <$a>"; fi
  done

  if [[ $debug ]]; then echo; fi

  local k=0
  while (($#))
  do
    if [[ $debug ]]; then printf "\e[31mk: $k  <$1>\e[0m\n"; fi
    case $1 in
      -x)
	if [[ $2 =~ ^\. ]]; then
	  add_glob ext $1 ${2:1}

	elif [[ $2 =~ ^/ ]]; then
	  add_glob dir $1 ${2:1}

	else # assuming a file globs
	  add_glob file $1 $2
	fi

        shift 2
        ;;

      --xf)
        add_glob file $1 $2
        shift 2
        ;;

      --xd)
        add_glob dir $1 $2
        shift 2
        ;;

      -i)
        ignore_case=1;
        if [[ $debug ]]; then echo "ignore_case<1>"; fi
        shift;
        ;;

      -I)
        ignore_binary=1;
        if [[ $debug ]]; then echo "ignore_binary<1>"; fi
        shift;
        ;;

      -h)
        no_filename=1;
        if [[ $debug ]]; then echo "no_filename<1>"; fi
        shift
        ;;

      -R)
        symlink_recurse=1;
        if [[ $debug ]]; then echo "symlink_recurse<1>"; fi
        shift
        ;;

      -n)
        linenum=1;
        if [[ $debug ]]; then echo "linenum<1>"; fi
        shift
        ;;

      -s)
        no_messages=1;
        if [[ $debug ]]; then echo "no_messages<1>"; fi
        shift;
        ;;

      --ad|--add-directory)  
        if ((k == 1)); then
          shift
          add_directory "$1"
          return
        fi
        ;;

      -d)
        sd=$2
        shift 2
        ;;

      --dry-run)
        dry_run=1
        shift
        ;;

      --) end_of_options=1
          if [[ $debug ]]; then echo "########## End Of Options ##########"; fi
          shift
          ;;

      -*) printf "\e[1;31m-E-\e[0m Unknown option '\e[1;31m$1\e[0m'"
          callsub $(get_subdir)/help
          return
          ;;

      *)  param[$((posid))]=$1
          ((posid++))
          if [[ $debug ]]; then echo "positional parameter: <$1>"; fi
          shift
          ;;
    esac

    ((k++))
  done

  if (($(has_empty_dirlist) == 0)); then
    $(if ((dry_run)); then echo echo; else echo eval; fi) \
      grep -E                   \
      --color=always            \
      ${ignore_case:+-i}        \
      ${ignore_binary:+-I}      \
      ${no_filename:+-h}        \
      ${no_messages:+-s}        \
      ${linenum:+-n}            \
      $(if ((symlink_recurse)); then  echo -R; else echo -r; fi)	  \
      $(for e in "${extglob[@]}";  do echo --exclude=\""*.$e"\";   done)  \
      $(for f in "${fileglob[@]}"; do echo --exclude=\""$f"\";     done)  \
      $(for d in "${dirglob[@]}";  do echo --exclude-dir=\""$d"\"; done)  \
      $(for p in "${param[@]}";    do echo "-e \"$p\""; done)		  \
      $(cat_dirlist ${sd:+--entry $sd} --quote --just-path)

  else
    printf "\e[1;31m-E-\e[0m No registered directory\n"
    echo Try
    callsub add help

  fi

}



# Function: add_glob
#
function add_glob
{
  local	type=$1 # p.e, file, dir, ext, ...
  local opt=$2
  local value=$3

  local id=__${FUNCNAME}_${type}__optid

  eval $id=$((${!id}+1))
  #echo "$id=<${!id}>"

  if [[ $value =~ ^[^,/]+(,[^,/]+)*$ ]]; then
    for e in $(echo $value | sed -r 's/^|$/"/g; s/,/" "/g')
    do
      #echo "$type<$e>"

      eval ${type}glob[$((${type}id++))]=$e
    done
  else
    case ${!id} in
      1) suf=st;;
      2) suf=nd;;
      3) suf=rd;;
      *) suf=th;;
    esac

    printf "\e[1;31m-E-\e[0m Syntax error with value '\e[1m$value\e[0m' of ${!id}$suf '\e[1m$opt\e[0m' option\n"
    printf "\e[1m-I-\e[0m Probably due to the presence of '\e[1m/\e[0m's\n"
    exit 2
  fi
} # add_glob


# Function: cat_dirlist [--quote|-q] [-entry|-e id] [--just-path|-p]
#
function cat_dirlist
{
  local quote pos posid id path

  while (($#)); do
    case $1 in
      --quote|-q)
	quote=1
	shift
	;;

      --entry|-e)
	id=$2
	shift 2
	;;

      --just-path|-p)
	path=1
	shift
	;;

      -*) 
	printf "\e[1;31m-E-\e[0m Unsupported option '\e[1m$1\e[0m'"
	exit 1
	;;

      *)  pos[$((posid++))]=$1
	  shift
	  ;;
    esac
  done

  set -- "${pos[@]}"


  if [[ -s $(get_dirlist) ]]; then
    cat $(get_dirlist) | if [[ $id ]]; then
      if [[ $id =~ ^[[:alpha:]] ]]; then
        sed -rn '/^'$id'\>/p' 
      else
        nl -nln | sed -rn '/^'$id'\s/p'
      fi | sed -r 's#.*\s(/.+)$#"\1"#'
    else
      if ((path)); then
	if ((quote)); then
      	  sed -r 's#.*\s(/.+)$#"\1"#'
      	else
      	  sed -r 's#.*\s(/.+)$#\1#'
      	fi
      else
	cat
      fi
    fi
  fi
}


# Function: has_empty_dirlist
#
function has_empty_dirlist
{
  if [[ -s $(get_dirlist) ]]; then
    echo 0
  else
    echo 1 
  fi
}

this_local=$(get_local)
function get_dirlist
{
  echo $this_local/dirlist
}


main "$@"


